{"version":3,"file":"index.js","sources":["../../resources/icon.png?asset","../../src/main/domains/recent/getRecentDomains.ts","../../src/main/domains/recent/saveRecentDomains.ts","../../src/main/domains/recent/addRecentDomain.ts","../../src/main/domains/createDomain.ts","../../src/main/index.ts"],"sourcesContent":["\n          import { join } from 'path'\n          export default join(__dirname, __VITE_NODE_PUBLIC_ASSET__92cb34e2__)","import { app } from 'electron'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { RecentDomain } from '../../../model/domains/recentDomain'\n\nconst getRecentDomainsFilePath = (): string => {\n  const userDataDir = app.getPath('userData')\n  return path.join(userDataDir, 'recentDomains.json')\n}\n\nconst isErrnoException = (error: unknown): error is NodeJS.ErrnoException => {\n  return error instanceof Error && 'code' in error\n}\n\nconst getRecentDomains = async (): Promise<RecentDomain[]> => {\n  const filePath = getRecentDomainsFilePath()\n  try {\n    const fileContent = fs.readFileSync(filePath, 'utf-8')\n    return JSON.parse(fileContent) as RecentDomain[]\n  } catch (error: unknown) {\n    if (isErrnoException(error) && error.code == 'ENOENT') {\n      fs.writeFileSync(filePath, JSON.stringify([]), 'utf-8')\n      return []\n    } else {\n      throw error\n    }\n  }\n}\n\nexport { getRecentDomainsFilePath, getRecentDomains }\n","import * as fs from 'fs'\nimport { getRecentDomainsFilePath } from './getRecentDomains'\nimport { RecentDomain } from '../../../model/domains/recentDomain'\n\nconst saveRecentDomains = async (recentDomains: RecentDomain[]): Promise<void> => {\n  const filePath = getRecentDomainsFilePath()\n  fs.writeFileSync(filePath, JSON.stringify(recentDomains, null, 2), 'utf-8')\n}\n\nexport { saveRecentDomains }\n","import { Domain } from '../../../model/domains/domain'\nimport { RecentDomain } from '../../../model/domains/recentDomain'\nimport { getRecentDomains } from './getRecentDomains'\nimport { saveRecentDomains } from './saveRecentDomains'\n\nexport interface AddRecentDomainProps {\n  domain: Domain\n  path: string\n}\n\nconst addRecentDomain = async (props: AddRecentDomainProps): Promise<RecentDomain> => {\n  const { path, domain } = props\n  const recentDomains = await getRecentDomains()\n  const existingIndex = recentDomains.findIndex((recentDomain) => recentDomain.path === path)\n  if (existingIndex !== -1) {\n    recentDomains.splice(existingIndex, 1)\n  }\n  const recentDomain = {\n    name: domain.name,\n    description: domain.description,\n    path: path\n  }\n  recentDomains.unshift(recentDomain)\n  if (recentDomains.length > 5) {\n    recentDomains.pop()\n  }\n  await saveRecentDomains(recentDomains)\n  return recentDomain\n}\n\nexport { addRecentDomain }\n","import { app } from 'electron'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { Domain } from '../../model/domains/domain'\nimport { addRecentDomain } from './recent/addRecentDomain'\n\nconst createDomain = async (domain: Domain): Promise<string> => {\n  const documentsDir = app.getPath('documents')\n  const domainDir = path.join(documentsDir, 'superform', domain.name)\n  if (!fs.existsSync(domainDir)) {\n    fs.mkdirSync(domainDir, { recursive: true })\n  }\n  const filePath = path.join(domainDir, 'domain.json')\n  fs.writeFileSync(filePath, JSON.stringify(domain, null, 2), 'utf-8')\n  addRecentDomain({ path: filePath, domain })\n  return filePath\n}\n\nexport { createDomain }\n","import { app, shell, BrowserWindow, ipcMain } from 'electron'\nimport * as path from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\nimport icon from '../../resources/icon.png?asset'\nimport { createDomain } from './domains/createDomain'\nimport { Domain } from '../model/domains/domain'\nimport { getRecentDomains } from './domains/recent/getRecentDomains'\nimport { addRecentDomain, AddRecentDomainProps } from './domains/recent/addRecentDomain'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  ipcMain.handle('create-domain', async (_, data: Domain) => {\n    return await createDomain(data)\n  })\n  ipcMain.handle('get-recent-domains', async () => {\n    return await getRecentDomains()\n  })\n  ipcMain.handle('add-recent-domain', async (_, data: AddRecentDomainProps) => {\n    return await addRecentDomain(data)\n  })\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":["join","app","path","fs","recentDomain","BrowserWindow","shell","is","electronApp","optimizer","ipcMain"],"mappings":"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"}